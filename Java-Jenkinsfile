    pipeline {
        agent any
        parameters {
          string(name: 'RouteName', description: 'cloudfront distribution name', defaultValue: params.RouteName ?: 'user-portal')
          string(name: 'BaseStackName', description: 'base infrastructure stack name', defaultValue: params.BaseStackName ?: 'BaseInfrastructure')
          string(name: 'BucketName', description: 'name of bucket to upload to', defaultValue: params.BucketName ?: '')
          string(name: 'Environment', defaultValue: params.Environment ?: 'dev')
        }
        tools {
            nodejs "Node 14"
        }
        stages {
            stage('Install') {
                steps {
                    sh 'npm install'
                }
            }
            stage('Lint'){
                steps {
                    sh 'npm run-script --silent -- ng lint --format checkstyle | grep "xml" > checkstyle-result.xml'
                }
                post {
                    always {
                        recordIssues tool: esLint(pattern: 'checkstyle-result.xml'),
                            enabledForFailure: true
                    }
                }
            }
            stage('Test') {
               steps {
                   sh 'npm test'
               }
            }
            stage('Build') {
                steps {
                    sh 'npm run build'
                }
            }
            stage('Production') {
                steps {
                    s3Delete(bucket:"${params.BucketName}", path:'')
                    s3Upload(file: 'dist/User-Portal', bucket:"${params.BucketName}")
                }
            }
            stage('Distribute'){
              steps {
                sh "aws cloudformation deploy --stack-name UserPortalStack --region ${AWS_REGION} --template-file userPortal.template --parameter-overrides RouteName=${params.RouteName} Environment=${params.Environment} --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset"
              }
            }
        }
    }
